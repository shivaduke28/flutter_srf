// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_srf/test/unit/application/player/audio_player_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_srf/system/audio/audio_player_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AudioPlayerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioPlayerService extends _i1.Mock implements _i2.AudioPlayerService {
  MockAudioPlayerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i2.PlaybackStatus> get statusStream =>
      (super.noSuchMethod(Invocation.getter(#statusStream), returnValue: _i3.Stream<_i2.PlaybackStatus>.empty())
          as _i3.Stream<_i2.PlaybackStatus>);

  @override
  _i3.Stream<Duration> get positionStream =>
      (super.noSuchMethod(Invocation.getter(#positionStream), returnValue: _i3.Stream<Duration>.empty())
          as _i3.Stream<Duration>);

  @override
  _i3.Stream<Duration?> get durationStream =>
      (super.noSuchMethod(Invocation.getter(#durationStream), returnValue: _i3.Stream<Duration?>.empty())
          as _i3.Stream<Duration?>);

  @override
  _i3.Stream<double> get volumeStream =>
      (super.noSuchMethod(Invocation.getter(#volumeStream), returnValue: _i3.Stream<double>.empty())
          as _i3.Stream<double>);

  @override
  _i3.Stream<_i2.AudioProcessingState> get processingStateStream =>
      (super.noSuchMethod(
            Invocation.getter(#processingStateStream),
            returnValue: _i3.Stream<_i2.AudioProcessingState>.empty(),
          )
          as _i3.Stream<_i2.AudioProcessingState>);

  @override
  double get volume => (super.noSuchMethod(Invocation.getter(#volume), returnValue: 0.0) as double);

  @override
  _i3.Future<void> playFile(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#playFile, [filePath]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> pause() =>
      (super.noSuchMethod(
            Invocation.method(#pause, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> resume() =>
      (super.noSuchMethod(
            Invocation.method(#resume, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> stop() =>
      (super.noSuchMethod(
            Invocation.method(#stop, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> seek(Duration? position) =>
      (super.noSuchMethod(
            Invocation.method(#seek, [position]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> setVolume(double? volume) =>
      (super.noSuchMethod(
            Invocation.method(#setVolume, [volume]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []), returnValueForMissingStub: null);
}
